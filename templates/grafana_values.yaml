##############################################
############# GRAFANA CONFIG #################
##############################################

## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
##
grafana:
  enabled: true

  rbac:
    enable: true
    create: true
    ## Use an existing ClusterRole/Role (depending on rbac.namespaced false/true)
    # useExistingRole: name-of-some-(cluster)role
    pspEnabled: ${grafana_psp_enable}
    pspUseAppArmor: ${grafana_psp_use_app_armor}
    namespaced: false
    extraRoleRules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "watch", "list"]
    extraClusterRoleRules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets"]
      verbs: ["get", "watch", "list"]

  serviceAccount:
    create: true
    name: ${grafana_service_account}
    annotations: ${grafana_service_account_annotations}
    autoMount: true

  replicas: ${replicas}

  ## Create HorizontalPodAutoscaler object for deployment type
  #
  autoscaling:
    enabled: false
  #   minReplicas: 1
  #   maxReplicas: 10
  #   metrics:
  #   - type: Resource
  #     resource:
  #       name: cpu
  #       targetAverageUtilization: 60
  #   - type: Resource
  #     resource:
  #       name: memory
  #       targetAverageUtilization: 60

  ## See `kubectl explain poddisruptionbudget.spec` for more
  ## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
  podDisruptionBudget: ${grafana_pdb}
  #  minAvailable: 1
  #  maxUnavailable: 1

  deploymentStrategy:
    type: Recreate

  readinessProbe:
    httpGet:
      path: /api/health
      port: 3000

  livenessProbe:
    httpGet:
      path: /api/health
      port: 3000
    initialDelaySeconds: 60
    timeoutSeconds: 30
    failureThreshold: 10

  image:
    repository: ${grafana_image_repository}
    tag: ${grafana_image_tag}
    sha: ""
    pullPolicy: ${grafana_image_pull_policy}

    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ##
    # pullSecrets:
    #   - myRegistrKeySecretName

  testFramework:
    enabled: true
    image: "bats/bats"
    tag: "v1.1.0"
    imagePullPolicy: IfNotPresent
    securityContext: {}

  securityContext: ${grafana_security_context}

  containerSecurityContext:
    {}

  extraConfigmapMounts: ${grafana_extra_configmap_mounts}
    # - name: certs-configmap
    #   mountPath: /etc/grafana/ssl/
    #   configMap: certs-configmap
    #   readOnly: true

  extraEmptyDirMounts: ${grafana_extra_empty_dir_mounts}
    # - name: provisioning-notifiers
    #   mountPath: /etc/grafana/provisioning/notifiers

  # Apply extra labels to common labels.
  extraLabels: {}

  ## Assign a PriorityClassName to pods if set
  priorityClassName: ${grafana_priority_class_name}

  downloadDashboardsImage:
    repository: appropriate/curl
    tag: latest
    pullPolicy: IfNotPresent

  downloadDashboards:
    env: {}
    envFromSecret: ""
    resources: {}

  ## Pod Annotations
  podAnnotations: ${grafana_pod_annotations}

  ## Pod Labels
  # podLabels: {}

  podPortName: grafana

  ## Deployment annotations
  annotations: ${grafana_annotations}

    ## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
  ## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
  ## ref: http://kubernetes.io/docs/user-guide/services/
  ##
  service:
    enabled: true
    type: ${grafana_service_type}
    port: ${grafana_service_port}
    targetPort: ${grafana_service_target_port}
      # targetPort: 4181 To be used with a proxy extraContainer
    annotations: ${grafana_service_annotations}
    labels: ${grafana_service_labels}
    portName: service

  serviceMonitor:
    ## If true, a ServiceMonitor CRD is created for a prometheus operator
    ## https://github.com/coreos/prometheus-operator
    ##
    enabled: false
    path: /metrics
    #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
    labels: {}
    interval: 1m
    scheme: http
    tlsConfig: {}
    scrapeTimeout: 30s
    relabelings: []

  extraExposePorts: []
 # - name: keycloak
 #   port: 8080
 #   targetPort: 8080
 #   type: ClusterIP

  # overrides pod.spec.hostAliases in the grafana deployment's pods
  hostAliases: []
    # - ip: "1.2.3.4"
    #   hostnames:
    #     - "my.host.com"

  ingress:
    enabled: ${grafana_ingress_enabled}
    annotations: ${grafana_ingress_annotations}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    labels: ${grafana_ingress_labels}
    path: /

    # pathType is only for k8s > 1.19
    pathType: Prefix

    hosts: ${grafana_ingress_hosts}
      # - chart-example.local
    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation
    ## Or for k8s > 1.19
    # - path: /*
    #   pathType: Prefix
    #   backend:
    #     service:
    #       name: ssl-redirect
    #       port:
    #         name: service
    tls: ${grafana_ingress_tls}
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  resources: ${grafana_resources}
    #  limits:
    #    cpu: 100m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 128Mi

  ## Node labels for pod assignment
  ## ref: https://kubernetes.io/docs/user-guide/node-selection/
  #
  nodeSelector: ${grafana_node_selector}

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  ##
  tolerations: ${grafana_tolerations}

  ## Affinity for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: ${grafana_affinity}

  extraInitContainers: ${grafana_extra_init_containers}

  ## Enable an Specify container in extraContainers. This is meant to allow adding an authentication proxy to a grafana pod
  extraContainers: ${grafana_extra_containers}
  # - name: proxy
  #   image: quay.io/gambol99/keycloak-proxy:latest
  #   args:
  #   - -provider=github
  #   - -client-id=
  #   - -client-secret=
  #   - -github-org=<ORG_NAME>
  #   - -email-domain=*
  #   - -cookie-secret=
  #   - -http-address=http://0.0.0.0:4181
  #   - -upstream-url=http://127.0.0.1:3000
  #   ports:
  #     - name: proxy-web
  #       containerPort: 4181

  ## Enable persistence using Persistent Volume Claims
  ## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
  ##
  persistence:
    type: pvc
    enabled: ${grafana_persistence_enabled}
    storageClassName: ${grafana_persistence_storage_class_name}
    accessModes:
      - ReadWriteOnce
    size: ${grafana_persistence_size}
    annotations: ${grafana_persistence_annotations}
    # subPath: ""
    existingClaim: ${grafana_persistence_existing_claim}

    ## If persistence is not enabled, this allows to mount the
    ## local storage in-memory to improve performance
    ##
    inMemory:
      enabled: false
      ## The maximum usage on memory medium EmptyDir would be
      ## the minimum value between the SizeLimit specified
      ## here and the sum of memory limits of all containers in a pod
      ##
      # sizeLimit: 300Mi

  initChownData:
    ## If false, data ownership will not be reset at startup
    ## This allows the prometheus-server to be run with an arbitrary user
    ##
    enabled: ${grafana_init_chown_data_enabled}

    ## initChownData container image
    ##
    image:
      repository: busybox
      tag: "1.31.1"
      pullPolicy: IfNotPresent

    ## initChownData resource requests and limits
    ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
    ##
    resources: ${grafana_init_chown_data_resources}
    #  limits:
    #    cpu: 100m
    #    memory: 128Mi
    #  requests:
    #    cpu: 100m
    #    memory: 128Mi

  # Administrator credentials when not using an existing secret (see below)
  adminUser: admin
  #adminPassword: strongpassword

  # Use an existing secret for the admin user.
  admin:
    existingSecret: ""
    userKey: admin-user
    passwordKey: ${grafana_admin_password_key}

  ## Define command to be executed at startup by grafana container
  ## Needed if using `vault-env` to manage secrets (ref: https://banzaicloud.com/blog/inject-secrets-into-pods-vault/)
  ## Default is "run.sh" as defined in grafana's Dockerfile
  command: ${grafana_command}
  # - "sh"
  # - "/run.sh"

  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:

  ## Extra environment variables that will be pass onto deployment pods
  env: ${grafana_env}

  ## "valueFrom" environment variable references that will be added to deployment pods
  ## ref: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#envvarsource-v1-core
  ## Renders in container spec as:
  ##   env:
  ##     ...
  ##     - name: <key>
  ##       valueFrom:
  ##         <value rendered as YAML>
  envValueFrom: {}

  ## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
  ## This can be useful for auth tokens, etc
  envFromSecret: ${grafana_env_from_secret}

  ## Sensible environment variables that will be rendered as new secret object
  ## This can be useful for auth tokens, etc
  envRenderSecret: {}

  # Inject Kubernetes services as environment variables.
  # See https://kubernetes.io/docs/concepts/services-networking/connect-applications-service/#environment-variables
  enableServiceLinks: ${grafana_enable_service_links}

  ## Additional grafana server secret mounts
  # Defines additional mounts with secrets. Secrets must be manually created in the namespace.
  extraSecretMounts: ${grafana_extra_secret_mounts}
    # - name: secret-files
    #   mountPath: /etc/secrets
    #   secretName: grafana-secret-files
    #   readOnly: true

  ## Additional grafana server volume mounts
  # Defines additional volume mounts.
  extraVolumeMounts: ${grafana_extra_volume_mounts}
    # - name: extra-volume
    #   mountPath: /mnt/volume
    #   readOnly: true
    #   existingClaim: volume-claim

  ## Pass the plugins you want installed as a list.
  ##
  plugins: ${grafana_plugins}
    # - digrich-bubblechart-panel
    # - grafana-clock-panel

  ## Configure grafana datasources
  ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  ##
  datasources:
    ${grafana_datasources}
  #  datasources.yaml:
  #    apiVersion: 1
  #    datasources:
  #    - name: Prometheus
  #      type: prometheus
  #      url: http://prometheus-prometheus-server
  #      access: proxy
  #      isDefault: true

  ## Configure notifiers
  ## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
  ##
  notifiers:
    ${grafana_notifiers}
  #  notifiers.yaml:
  #    notifiers:
  #    - name: email-notifier
  #      type: email
  #      uid: email1
  #      # either:
  #      org_id: 1
  #      # or
  #      org_name: Main Org.
  #      is_default: true
  #      settings:
  #        addresses: an_email_address@example.com
  #    delete_notifiers:

  ## Configure grafana dashboard providers
  ## ref: http://docs.grafana.org/administration/provisioning/#dashboards
  ##
  ## `path` must be /var/lib/grafana/dashboards/<provider_name>
  ##
  dashboardProviders:
    ${grafana_dashboard_providers}
  #  dashboardproviders.yaml:
  #    apiVersion: 1
  #    providers:
  #    - name: 'default'
  #      orgId: 1
  #      folder: ''
  #      type: file
  #      disableDeletion: false
  #      editable: true
  #      options:
  #        path: /var/lib/grafana/dashboards/default

  ## Configure grafana dashboard to import
  ## NOTE: To use dashboards you must also enable/configure dashboardProviders
  ## ref: https://grafana.com/dashboards
  ##
  ## dashboards per provider, use provider name as key.
  ##
  dashboards:
    ${grafana_dashboards}
    # default:
    #   some-dashboard:
    #     json: |
    #       $RAW_JSON
    #   custom-dashboard:
    #     file: dashboards/custom-dashboard.json
    #   prometheus-stats:
    #     gnetId: 2
    #     revision: 2
    #     datasource: Prometheus
    #   local-dashboard:
    #     url: https://example.com/repository/test.json
    #   local-dashboard-base64:
    #     url: https://example.com/repository/test-b64.json
    #     b64content: true

  ## Reference to external ConfigMap per provider. Use provider name as key and ConfiMap name as value.
  ## A provider dashboards must be defined either by external ConfigMaps or in values.yaml, not in both.
  ## ConfigMap data example:
  ##
  ## data:
  ##   example-dashboard.json: |
  ##     RAW_JSON
  ##
  dashboardsConfigMaps:
    ${grafana_dashboards_config_maps}
  #  default: ""

  ## Grafana's primary configuration
  ## NOTE: values in map will be converted to ini format
  ## ref: http://docs.grafana.org/installation/configuration/
  ##
  grafana.ini:
    ${grafana_main_config}
    ${grafana_okta_config}
    ${grafana_db_config}
  ## LDAP Authentication can be enabled with the following values on grafana.ini
  ## NOTE: Grafana will fail to start if the value for ldap.toml is invalid
    # auth.ldap:
    #   enabled: true
    #   allow_sign_up: true
    #   config_file: /etc/grafana/ldap.toml

  ## Grafana's LDAP configuration
  ## Templated by the template in _helpers.tpl
  ## NOTE: To enable the grafana.ini must be configured with auth.ldap.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#auth-ldap
  ## ref: http://docs.grafana.org/installation/ldap/#configuration
  ldap:
    # `existingSecret` is a reference to an existing secret containing the ldap configuration
    # for Grafana in a key `ldap-toml`.
    existingSecret: ${grafana_ldap_existing_secret}
    # `config` is the content of `ldap.toml` that will be stored in the created secret
    config: ${grafana_ldap_config}
    # config: |-
    #   verbose_logging = true

    #   [[servers]]
    #   host = "my-ldap-server"
    #   port = 636
    #   use_ssl = true
    #   start_tls = false
    #   ssl_skip_verify = false
    #   bind_dn = "uid=%s,ou=users,dc=myorg,dc=com"

  ## Grafana's SMTP configuration
  ## NOTE: To enable, grafana.ini must be configured with smtp.enabled
  ## ref: http://docs.grafana.org/installation/configuration/#smtp
  smtp:
    # `existingSecret` is a reference to an existing secret containing the smtp configuration
    # for Grafana.
    existingSecret: ${grafana_smtp_existing_secret}
    userKey: ${grafana_smtp_user_key}
    passwordKey: ${grafana_smtp_password_key}

  ## Sidecars that collect the configmaps with specified label and stores the included files them into the respective folders
  ## Requires at least Grafana 5 to work and can't be used together with parameters dashboardProviders, datasources and dashboards
  sidecar:
    image:
      repository: quay.io/kiwigrid/k8s-sidecar
      tag: 1.12.3
      sha: ""
    imagePullPolicy: IfNotPresent
    resources: {}
  #   limits:
  #     cpu: 100m
  #     memory: 100Mi
  #   requests:
  #     cpu: 50m
  #     memory: 50Mi
    # skipTlsVerify Set to true to skip tls verification for kube api calls
    # skipTlsVerify: true
    enableUniqueFilenames: false
    dashboards:
      enabled: false
      SCProvider: true
      # label that the configmaps with dashboards are marked with
      label: grafana_dashboard
      # value of label that the configmaps with dashboards are set to
      labelValue: null
      # folder in the pod that should hold the collected dashboards (unless `defaultFolderName` is set)
      folder: /tmp/dashboards
      # The default folder name, it will create a subfolder under the `folder` and put dashboards in there instead
      defaultFolderName: null
      # If specified, the sidecar will search for dashboard config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
      # search in configmap, secret or both
      resource: both
      # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
      # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
      folderAnnotation: null
      # provider configuration that lets grafana manage the dashboards
      provider:
        # name of the provider, should be unique
        name: sidecarProvider
        # orgid as configured in grafana
        orgid: 1
        # folder in which the dashboards should be imported in grafana
        folder: ''
        # type of the provider
        type: file
        # disableDelete to activate a import-only behaviour
        disableDelete: false
        # allow updating provisioned dashboards from the UI
        allowUiUpdates: false
        # allow Grafana to replicate dashboard structure from filesystem
        foldersFromFilesStructure: false
    datasources:
      enabled: true
      # label that the configmaps with datasources are marked with
      label: grafana_datasource
      # value of label that the configmaps with datasources are set to
      labelValue: null
      # If specified, the sidecar will search for datasource config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
      # search in configmap, secret or both
      resource: both
    notifiers:
      enabled: false
      # label that the configmaps with notifiers are marked with
      label: grafana_notifier
      # If specified, the sidecar will search for notifier config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces
      searchNamespace: null
      # search in configmap, secret or both
      resource: both

  ## Override the deployment namespace
  ##
  namespaceOverride: ""

  ## Number of old ReplicaSets to retain
  ##
  revisionHistoryLimit: 10

  ## Add a seperate remote image renderer deployment/service
  imageRenderer:
    # Enable the image-renderer deployment & service
    enabled: ${image_renderer_enabled}
    replicas: ${image_renderer_replicas}
    image:
      # image-renderer Image repository
      repository: ${image_renderer_image_repository}
      # image-renderer Image tag
      tag: ${image_renderer_image_tag}
      # image-renderer Image sha (optional)
      sha: ""
      # image-renderer ImagePullPolicy
      pullPolicy: IfNotPresent
    # extra environment variables
    env: ${image_renderer_env}
      # HTTP_HOST: "0.0.0.0"
      # RENDERING_ARGS: --no-sandbox,--disable-gpu,--window-size=1280x758
      # RENDERING_MODE: clustered
    # image-renderer deployment serviceAccount
    serviceAccountName: ${image_renderer_service_account}
    # image-renderer deployment securityContext
    securityContext: ${image_renderer_security_context}
    # image-renderer deployment Host Aliases
    hostAliases: []
    # image-renderer deployment priority class
    priorityClassName: ${image_renderer_priority_class_name}
    # image-renderer deployment annotations
    annotations: ${image_renderer_annotations}
    # image-renderer pod annotations
    podAnnotations: ${image_renderer_pod_annotations}
    service:
      # Enable the image-renderer service
      enabled: true
      # image-renderer service port name
      portName: 'http'
      # image-renderer service port used by both service and deployment
      port: ${image_renderer_port}
      targetPort: ${image_renderer_target_port}
    # In case a sub_path is used this needs to be added to the image renderer callback
    grafanaSubPath: ""
    # name of the image-renderer port on the pod
    podPortName: http
    # number of image-renderer replica sets to keep
    revisionHistoryLimit: 10
    networkPolicy:
      # Enable a NetworkPolicy to limit inbound traffic to only the created grafana pods
      limitIngress: true
      # Enable a NetworkPolicy to limit outbound traffic to only the created grafana pods
      limitEgress: false
    resources: ${image_renderer_resources}
  #   limits:
  #     cpu: 100m
  #     memory: 100Mi
  #   requests:
  #     cpu: 50m
  #     memory: 50Mi

  # ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
  # ##
  # forceDeployDatasources: false

  # ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
  # ##
  # forceDeployDashboards: false

  # ## Deploy default dashboards
  # ##
  # defaultDashboardsEnabled: true

  # ## Timezone for the default dashboards
  # ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
  # ##
  # defaultDashboardsTimezone: utc

  # sidecar:
  #   dashboards:
  #     enabled: true
  #     label: grafana_dashboard
  #     labelValue: "1"
  #     folder: /var/lib/grafana/dashboards

  #     ## Annotations for Grafana dashboard configmaps
  #     ##
  #     annotations: {}
  #     multicluster:
  #       global:
  #         enabled: false
  #       etcd:
  #         enabled: false
  #     provider:
  #       allowUiUpdates: false
  #   datasources:
  #     enabled: true
  #     defaultDatasourceEnabled: true

  #     uid: prometheus

  #     ## URL of prometheus datasource
  #     ##
  #     # url: http://prometheus-stack-prometheus:9090/

  #     # If not defined, will use prometheus.prometheusSpec.scrapeInterval or its default
  #     # defaultDatasourceScrapeInterval: 15s

  #     ## Annotations for Grafana datasource configmaps
  #     ##
  #     annotations: {}

  #     ## Create datasource for each Pod of Prometheus StatefulSet;
  #     ## this uses headless service `prometheus-operated` which is
  #     ## created by Prometheus Operator
  #     ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/0fee93e12dc7c2ea1218f19ae25ec6b893460590/pkg/prometheus/statefulset.go#L255-L286
  #     createPrometheusReplicasDatasources: false
  #     label: grafana_datasource
  #     labelValue: "1"

  # deleteDatasources: []
  # # - name: example-datasource
  # #   orgId: 1

  # ## Configure additional grafana datasources (passed through tpl)
  # ## ref: http://docs.grafana.org/administration/provisioning/#datasources
  # additionalDataSources: []
  # # - name: prometheus-sample
  # #   access: proxy
  # #   basicAuth: true
  # #   basicAuthPassword: pass
  # #   basicAuthUser: daco
  # #   editable: false
  # #   jsonData:
  # #       tlsSkipVerify: true
  # #   orgId: 1
  # #   type: prometheus
  # #   url: https://{{ printf "%s-prometheus.svc" .Release.Name }}:9090
  # #   version: 1
